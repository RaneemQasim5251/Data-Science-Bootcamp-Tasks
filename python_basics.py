# -*- coding: utf-8 -*-
"""python_basics.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17vMFh1OdTv7WuJHtqpDfL70DfHKisTkg

Built in
"""

2+5

2

print(5+6)
1+4

print(5+5)
print(9-4)

"""concatination for strings"""

print("my age is: "+ '40')

print("My age is: ", '40')

"""V

Shift Binary
"""

x = 5 #0101
y = x << 1 #shift
print(y)

x = 5
y = x >> 1

"""inout / output"""

name = input("what is your name? ")

print("welcome", name, "to the python course")

"""condetion"""

password = input("what is your password? ")

if password == 'DS':
  print("welcome to the course")
else:
  print("wrong password")

first_name = input("what is your first name? ")
last_name = input("what is your last name? ")
print("welcome " + first_name, last_name)

"""Type"""

num=10
type(num)
# type() ->> error cause no arg

type("Alice")

x = 1
x = 'hello'
x = [1, 2, 3]

type(x)

x = 3.14
type(x)

x = "5" + "5"
type(x)

type(4+2)

type("alice" + " " + "bob")

type(9 > 5)

"""Ex"""

x = 10 + 5
type (x)

x = "Alice" + "Bob"
type(x)

True or False

"""X = var
5 = value
"""

x = 5

x = 20
y = '20'

print(type(x))
print(type(y))
print(x + y)

z = int(y)
print(type(z))
print(x + z)

width = input("what is the width of the rectangle? ")
hight = input("what is the hight of the rectangle? ")
area = int(width) * int(hight)
print("the area is: ", area)

age = input("what is your age? ")
age = int(age)
print("your age after 10 years will be: ", age+10)

"""Rules of naming variable"""

my_variable = 5
My_Variable = 10

"""wrong"""

2my_variable = 5

class = 5
True = 1
break = True

sum = 5
max = 10
list = [10, 20, 30]

"""Logical Op"""

x2 = 35.0
y = 12.50
mne = x2* y
print (mne)

x2 = 35.0

hours = 35.0
rate = 12.50
pay = hours * rate
print(pay)

"""data type"""

for i in range(0,10,2):
  print(i)

type(range(0, 10, 2))

"""Numbers"""

x = 10
y = 2.5
z= -10
print(type(x))
print(type(y))
print(type(z))

print(x + y)
print(x - y)
print(x * y)
print(x / y)
print(x // y)
print(x % y)
print(x ** y)

print(x == y)
print(x != y)
print(x > y)
print(x < y)
print(x >= y)
print(x <= y)

print(sum([]))

print(3 + 2 * 5)
print(8 - 4 / 2)
print((3 + 2) * 5)
print(8 - (4 / 2))
print(2 ** 3 ** 2)
print((2 ** 3) ** 2)

length, width = 10, 5
area = length * width
print(area)

num1 = int(input("Enter the first number: "))
num2 = int(input("Enter the second number: "))
total = num1 + num2
dif = num1 - num2
quotient = num1 / num2
reminders = num1 % num2
print("The total is: ", total)
print("The difference is: ", dif)
print("The quotient is: ", quotient)
print("The reminders is: ", reminders)
print(total)

num1 = int(input("Enter the first number: "))
num2 = int(input("Enter the second number: "))
total = sum(num1, num2)
difference = sub(num1, num2)
quotient = quotiet(num1, num2)
reminders = reminders(num1, num2)

print("The total is: ", total)
print("The difference is: ", difference)
print("The quotient is: ", quotient)
print("The reminders is: ", reminders)
print(total)

def calculate_operations(num1, num2):
    total = num1 + num2
    dif = num1 - num2
    quotient = num1 / num2
    reminders = num1 % num2

    print("The total is:", total)
    print("The difference is:", dif)
    print("The quotient is:", quotient)
    print("The reminders is:", reminders)
    print(total)

"""area of circle"""

from math import pi

radius = 5
area = pi * radius ** 2
print(area)

hello = 'hello'
worls = "world"

first_name = "John"
name = "john doe"
last_name = "Doe"
address = "Riyadh, Saudi Arabia"
phone = "00966555555555"

message = """Hello everyone,
I hope you are enjoying the course,

thank you"""

print(len(phone))
print(len(message))

msg = '''This is a long message.
It can have "qoute", 'single quotes', and multiple
Pretty cool, right?'''

print(msg)

print(len(msg))

print(len([1,2,3,4]))

s = "Salam" * 3
print(s)

zeros = "0" * 8
print("1" + zeros)

vowels = "aeiou"
print("a" in vowels)

"hello".upper() #method inside text convert lower case to upper case

print(name.capitalize())

print ("a" in vowels)

print(name.title())

print(name.islower())
print(name.isupper())

print(name.count('o'))

print(name.count('h'))

print(name.find('ohn'))

print(name.replace('ohn', "Owen"))

print(name.replace('ohn', str(1)))

print(name.strip())

l = [x for x in 'd s i s a w a s e m'.strip()]
print(' ds is ao wsem '.strip())

print(name.strip())

for x in ' data '.strip():
  print(x)

print("hello, world".split(","))

print("hello, world".split('o')[-1])

out="hello,world".split(',')[-1]

print(out)

" Null ".join('1111')

print(" - ".join(["apple", "banana", "cherry"]))

print(" Null ".join(["a", "b", "c"]))

print(name.ljust(10)),
print(name.center(100),
print(name.rjust(50)))

print(name)

print(f'Name: {name}')

print(name.ljust(50))
print(name.center(60))

"""Padding"""

print(format(123, "06d"))

type(format(123, "06d"))

print(name.upper())
print(name.lower())

print(name.startswith('j'))
print(name.endswith('e'))

"""decorate string"""

name = 'john'
width = 20
decorator = "*"
print(decorator * width)
print(name.center(width, decorator))
print(decorator * width)

name = ' Raneem '
name2 = name.upper() #new variable to set uppercase
width = 70
decorator = "#"
print(decorator * width)
print(name2.center(width, decorator))
print(decorator * width)

name = ' Raneem '
decorator = "#"
print(decorator * width)
print(name.upper().center(width, decorator))
print(decorator * width)

name = "Pythonista"

print(name[2:])

print(name[0])
print(name[-1])
print(name[9])
print(name[-1])

name[2:7:2]
str[start:end:step]

print(name[2:5])
print(name[-5:2:3])

name = "Raneem"

print(name[0::1])

print(name[2:3:2])

print(name[0:5:2])

print(name[0])
print(name[-1])
print(name[5])
print(name[-2])

print(name[2:])

print(name[1:2:-2])

name = "Raneem"[::-1]
print(name)

name = "abcdef"[1:6:2]
print(name)

name = "abcdef"[1:6:2]
name2 = name.upper()
print(name2)

greeting = "Hello World"
greeting2 = greeting.count("Hello World")
print(greeting2)

name = "John"
age = 30
print("My name is "+ name +" and my age is " + str(age))
print("my name is" + name + "and my age is "+ str (age))
print("my name is {} and my age is {} ".format(name, age))
print("my name is {} and my age is {} ".format(name, age, age))
print(f"my name is {name} and my age is {age}")

first = "Raneem"
last = "Qasim"
age = 23
print("My name is "+ first + " " + last + " and my age is " + str(age))
print("my name is {} {} and my age is {} ".format(first, last, age))
print(f"my name is {first} {last} and my age is {age}")

num = 10.5679
print("{:.2f}".format(num))

print(f"{num:.2f}")

print(f"{num:>10.2f}")

big_num = 1000000
print(f"{big_num}")

percent =

"""Shallow copy vs Deep copy"""

a = [[1,2], [3,4]]
b= a.copy()
a[0][0] = 999
print(a)
print(b)

a = [[1,2], [3,4]]
b= a
a[0][0] = 999
print(a)
print(b)

"""Deep Copy"""

from re import A
import copy
a = [[1, 2], [3, 4]]
b = copy.deepcopy(a)
a[0][0] = 999
print(a)
print(b)

"""immutable

`int`
`float`
`bool`
`str`
`tuple`
`frozenest`
`bytes`

Mutable Data Type

`list`
`dict`
`set`
`bytearray`
"""

name = "Alice"
name[0] = "M"

"""# list and dec change
# tuple and string don't change

bytes and bytearrays
"""

b = bytes([65, 66, 67])
print(b)

"""Indexing and Slicing"""

a = int(input("s"))
b = int(input("s"))
print(sum([a,b]))

fruits = ["Apple", "Banana", "Orange", "Lemon"]

first_element = fruits[0]
last_element = fruits[-1]
print(first_element)
print(last_element)

fruits[::2]

"""Spiders"""

["abc", 123, False, ['AABB', 'CC']] [-1][0][0]

my_mixed_list = ["abc", 123, False, ['AABB', 'CC']]
my_mixed_tuple = ("abc", 123, False, ['AABB', 'CC'])
my_mixed_set = {"abc", 123, False, ['AABB', 'CC']}
my_mixed_dict = {"abc", 123, False, ['AABB', 'CC']}

numbers = [10, 20 , 30, 40, 50]
numbers.append(30)
print(numbers)

numbers = [10, 20 , 30, 40, 50]
numbers.clear()
print(numbers)

numbers = [10, 20 , 30, 40, 50]
n = numbers.copy()
print(n)

numbers = [10, 20, 30, 40, 50]
n = numbers.count(30)
print(n)

numbers = [10, 20 , 30, 40, 50]
n = numbers.extend(l)
print(n)



numbers = [10, 20 , 30, 40, 50]
n = numbers.index()
print(numbers)

numbers = [10, 20 , 30, 40, 50]
n = numbers.insert()
print(n)

numbers = [10, 20 , 30, 40, 50]
n = numbers.pop(2)
print(numbers)

numbers = [10, 20 , 30, 40, 50]
n = numbers.remove(10)
print(numbers)

numbers = [10, 20 , 30, 40, 50]
n = numbers.reverse()
print(numbers)

numbers = [10, 30 , 80, 40, 50]
n = numbers.sort()
print(n)

numbers = [10, 30 , 80, 40, 50]
n = numbers.sort()
print(n)

"""list methods

append, clear, copy

iterating over lists
"""

nums = [10, 20, 30, 40, 50]

"""item in list"""

second_list=[]
for number in nums: #num is var, defined here
  new_item=number+10 #called here
  second_list.append(new_item)
print(second_list)

for asdf in nums:
  print(asdf)

s = 0
for x in nums:
  print(x)
  s += x
  print("----")
  print(s)
print("sum:", s)

movies = ["Hannibal", "Gone Girl", "Lalaland"]
for movie in movies:
    print(movie)

negative_words = ["sad", "angry", "frustrated", "disappointed", "terrible", "awfel"]
f = negative_words[1]
s = negative_words[-1]
t = negative_words[-3]
print(f, s, t)

negative_words = ["sad", "angry", "frustrated", "disappointed", "terrible", "awfel"][0:3:1]
print(negative_words)

negative_words = ["sad", "angry", "frustrated", "disappointed", "terrible", "awfel"][1:5:1]
print(negative_words)

negative_words = ["sad", "angry", "frustrated", "disappointed", "terrible", "awfel"][0:6:2]
print(negative_words)

negative_words = ["sad", "angry", "frustrated", "disappointed", "terrible", "awfel"]

if 'awfel' in negative_words:
    print('awfel is present in the list')
else:
    print('awfel is not there!')

if 'happy' in negative_words:
    print('happy is present in the list')
else:
    print('happy is not there!')

m = negative_words.index("frustrated")
print(m)

"""Associated Lists"""

students = ['john', 'Mary', 'Bob', 'sara']
Marks = [90, 80, 75, 85]

for i in range(len(students)):  #clean code is most for changable list
  print(i)
  print(f"{i+1}----------------{students[i]} - {Marks[i]}")

fruits = ["apple", "banana", "cherry", [1, 2, 3]]

for index, fruit in enumerate(fruits):  #mach index with value using enumerate
    print(f"Index: {index}, Fruit: {fruit}")

students = ['john', 'Mary', 'Bob', 'sara']
Marks = [90, 80, 75, 85]

for students, mark in zip(students, Marks): #zip used for pairs
  print(f"{students} - {mark}")

l1 = [1, 2, 3]
l2 = [6, 5, 4]

result = list(map(sum,zip(l1,l2)))
print(result)

l1 = [1, 2, 3]
l2 = [6, 5, 4]

res = [l1 + l2
       for l1, l2
       in zip(l1, l2)]
print(res)

l1 = [1, 2, 3]
l2 = [6, 5, 4]

res = [l1 * l2
       for l1, l2
       in zip(l1, l2)]
print(res)

numbers = [10, 20, 30, 40, 50]

numbers.sort(reverse=True)
print(numbers)

x = numbers.sort()
print(x) #don't return a value

old_list = [20, 10, 50, 40, 30]
new_list = sorted(old_list)
print(old_list)
print(new_list)

nums = [
    "1",
    "31",
    "2"
]

sorted(nums)

sorted(nums, key=int)

nums = [sorted]

nums = [40, 30, 10, 20, 10]

print(min(nums))

nums = [40, 30, 10, 20, 10]

average = sum(nums) / len(nums)
print("The average of the list is:", average)

nums_count = numbers.count(10)
print("Number of 10's:", nums_count)

my_set = {1, 2, 3, 4, 5} #I can't replecate values (غير مكررة)
print(my_set)

my_list = [1, 2, 3, 4, 5, 6]
my_set = set(my_list)
print(my_set)

my_set.add(6) #can't use append
print(my_set)

my_set.remove(4)
print(my_set)

my_set[1]

if 3 in my_set:
    print("3 is in the set")
else:
    print("3 is not in the set")

print(len(my_set))

even_numbers = {2, 4, 6, 8, 10}
odd_numbers = {1, 3, 5, 7, 9, 10}

union_set = even_numbers.union(odd_numbers)
print(union_set)

intersection_set = even_numbers.intersection(odd_numbers)
print(intersection_set)

class_a = {"Alice", "Bob", "Carol"}
class_b = {"Bob", "Carol", "Dave"}

union_set = class_a.union(class_b)
print(union_set)

intersection_set = class_a.intersection(class_b)
print(intersection_set)

class_a - class_b

union_set = students_ids.union(enrollment_ids)
print(union_set)

students_ids = {101, 102, 103}
enrollment_ids = {101, 102, 104}

intersection_set = students_ids.intersection(students_ids)
print(students_ids)

difference = students_ids.difference(students_ids)
print(difference)

difference = students_ids.difference(enrollment_ids)
print(difference)

students_ids.add(105)
print(students_ids)

enrollment_ids.remove(102)
print(enrollment_ids)

if 103 in students_ids:
    print("103 is in students_ids")
else:
    print("103 is not in students_ids")

print(len(enrollment_ids))

my_dictinary = {
    "name": "ALice",
    "age": 25,
    "courses": ["ICS", "MATH", "EN"],
}
print(my_dictinary)

del my_dictinary["age"]
print(my_dictinary)

book_dictinary = {
    "title": "A Tale of Two Cities",
    "author": "Charles Dickens",
    "year": 1859,
}
print(book_dictinary)

print(book_dictinary["title"])
print(book_dictinary["author"])

del book_dictinary["year"]
print(book_dictinary)

book_dictinary["year"] = 2030
print(book_dictinary)

del book_dictinary.keys["author"]
print(book_dictinary)

for country in country_capitals:
    print(country)

a = {'x' : 1, 'y' : 2}
b = {'y' : 3, 'z' : 4}
a.update(b)
print(a)

a = {'x' : 1}
a.update([("y", 2), ("z", 3)])
print(a)

a = {'x' : 1}
a.update(y=2, z=3)
print(a)

fruits = {"Apple": "Red", "Banana": "Yellow"}

for fruit in fruits.keys():
    print(fruit)

for fruit in fruits.values():
    print(fruit)

for fruit, color in fruits.items():
    print(f"{fruit} is {color}")

fruits_prices = {"Orange": 1.0, "Orange": 0.75}
fruits_prices["Banana"] = 3.5
print(fruits_prices)

fruits_prices.update("Apple"2.5)
print(fruits_prices)

basket = {"Apple", "Banana", "Orange", "Apple", "Banana"}
total_price = 0

for fruit in basket:
  price = fruits_prices.get(fruit, 0)
  total_price += price

print(total_price)
print(basket)

sampleDict = {
    "class": {
        "student": {
            "name": "Mike",
            "marks": {
                "physics": 70,
                "history": 80
            }
        }
    }
}

"""##riview it"""

print(sampleDict["class"]["student"]["marks"]["history"])

marks = sampleDict["class"]["student"]["marks"]

print(list(marks.values()))
print(list(marks.values())[1])

tuple1 = ("apple", "banana", "cherry", 44)
tuple2 = (1, 5, 7, 9, 3)
tuple3 = (True, False, False)

a, b, c, d = tuple1

name, age, position = ("Alice", 25, "Manager")
name

tuple1[0]

tuple1[0] = "pear"

def calculate(num1, num2):
  sum = num1 + num2
  diff = num1 - num2
  return sum, diff

result = calculate(10, 5)
print(result)

calculate(10, 5)

students = ['Ahmed', 'Badr', 'Camel', 'Dania']
marks = [90, 80, 75, 85, 77]
students_dict = list(zip(students, marks))
print(students_dict)

students_dict = dict(zip(students, marks))
print(students_dict)

"""Ex."""

def calculate(a1, a2):
  square = a1 * a2
  return square

  product = a * b
  cube = product ** 3
  return cube

result = calculate(10, 5)
print(result)

"""Comprehensions

for list
"""

nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
nums

[x.replace(',','') for x in data['text'] if ',' in x]

for x in data['text']:
  if ',' in x:
    x = x.replace(',','')

nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
nums

nums_copy = [x for x in nums]
nums_copy

nums_copy.append(10)
nums_copy

nums_even = [x for x in nums if x % 2 == 0]
nums_even

nums_squared = [x**2 for x in nums]
nums_squared

nums_even_squared = [x**2 for x in nums if x % 2 == 0]
nums_even_squared

"""just like the list nums, range is a function return"""

for i in range (10, 100 + 1, 10):
  print(i)

my_list = [x ** 2 for x in range(10, 100 + 1, 10)]
my_list



nums = [1, 2, 3]
nums_incr = [x + 1 for x in nums]

nums_incr

fruites = ["apple", "banana", "2", "cherry", "kiwi", "mango"]
newlist = [x for x in fruites if "2" in x]
newlist

greeting = ["hello", "world"]
newlist = [x.upper() for x in greeting]
newlist

my_set = {x for x in range(5)}
my_set

def print_dict(d):
  for k, v in d.items():
    print(f'{k} -> {v}')

numbers = [1, 2, 3, 4, 5]
squares = {x: x**2 for x in numbers}
print_dict(squares)

strings = ["Alice", "Bob", "Carol"]
lengths = {s: s.upper() for s in strings}
print_dict(lengths)

fruites = ["lonly", "lion", "sky"]

count = 0
for word in fruites:
    count += word.count("l")

print(count)

"""Function"""

import math


x = abs(-2) + math.pow(2, 3)
y = math.sqrt

import math
help(math)

dir(math)

for i in dir
  if i.startswith('__')
print(i.startswith('__'))

def functoin_name(parameters):
  #code
  return value

def add(num1, num2):
  sum = num1 + num2
  return sum

result = add(10, 5)
print(result)

add(10, 20)

print("ggg")

def show():

def multiply(a, b, c):
  product = a * b * c
  return product

result = multiply(2, 3, 4)
print(result)

def check_password_strength(password):
  if len(password) < 8:
    return "Weak"
  else:
    return "Strong"

password = input("Enter a password: ")
strength = check_password_strength(password)
print("Password strength:", strength)

def greet(name, greeting="Hello"):
  print(f"{greeting}, {name}!")

greet("Alice")
greet("Bob", "Hi")

def name_salaray(name, salary="9000"):
  print(f"{salary}, {name}!")

name_salaray("Alice")
name_salaray("Bob", "90")

from datetime import date
t_date = date.today()
print(" Year", t_date.year)
print(" Month", t_date.month)
print(" Day", t_date.day)

"""Global Scope"""

x = 0

def outer():
  x = 1
  print(x)
  def inner():
    x = 2
    print(x)

  print(x)
outer()
print(x)

x = 0

def outer():
  global x
  x = 1
  print(x)

  def inner():
    nonlocal x
    x = 2
    print(x)

  inner()
  print(x)

outer()
print(x)

x = 0

def outer():
    global x
    x = 1
    print(x)

    y = 10

    def inner():
        nonlocal y
        y = 2
        print(y)

    inner()
    print(y)

outer()
print(x)

